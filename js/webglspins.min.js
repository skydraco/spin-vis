"use strict";function WebGLSpins(canvas,options){this._canvas=canvas,this._options={},this._mergeOptions(options,WebGLSpins.defaultOptions),this._gl=null,this._gl_initialized=!1,this._renderers=[];for(var i=0;i<this._options.renderers.length;i++){var renderer=this._options.renderers[i],viewport=[0,0,1,1];typeof renderer==typeof[]&&(viewport=renderer[1],renderer=renderer[0]),this._renderers.push([new renderer(this),viewport])}this._initGLContext(),this._instancePositionArray=null,this._instanceDirectionArray=null,this._mouseDown=!1,this._lastMouseX=null,this._lastMouseY=null,canvas.addEventListener("mousewheel",this._handleMouseScroll.bind(this)),canvas.addEventListener("DOMMouseScroll",this._handleMouseScroll.bind(this)),canvas.addEventListener("mousedown",this._handleMouseDown.bind(this)),canvas.addEventListener("mousemove",this._handleMouseMove.bind(this)),document.addEventListener("mouseup",this._handleMouseUp.bind(this))}function mmult(a,b){for(var aNumRows=a.length,aNumCols=a[0].length,bNumCols=(b.length,b[0].length),m=new Array(aNumRows),r=0;r<aNumRows;++r){m[r]=new Array(bNumCols);for(var c=0;c<bNumCols;++c){m[r][c]=0;for(var i=0;i<aNumCols;++i)m[r][c]+=a[r][i]*b[i][c]}}return m}function matrix_invert(M){if(M.length===M[0].length){var i=0,ii=0,j=0,dim=M.length,e=0,I=[],C=[];for(i=0;i<dim;i+=1)for(I[I.length]=[],C[C.length]=[],j=0;j<dim;j+=1)I[i][j]=i==j?1:0,C[i][j]=M[i][j];for(i=0;i<dim;i+=1){if(0==(e=C[i][i])){for(ii=i+1;ii<dim;ii+=1)if(0!=C[ii][i]){for(j=0;j<dim;j++)e=C[i][j],C[i][j]=C[ii][j],C[ii][j]=e,e=I[i][j],I[i][j]=I[ii][j],I[ii][j]=e;break}if(0==(e=C[i][i]))return}for(j=0;j<dim;j++)C[i][j]=C[i][j]/e,I[i][j]=I[i][j]/e;for(ii=0;ii<dim;ii++)if(ii!=i)for(e=C[ii][i],j=0;j<dim;j++)C[ii][j]-=e*C[i][j],I[ii][j]-=e*I[i][j]}return I}}function dotProduct(v1,v2){return v1[0]*v2[0]+v1[1]*v2[1]+v1[2]*v2[2]}function squaredLength(v){return dotProduct(v,v)}function intersectRayWithSphere(center,radius,origin,direction){var OC=[0,0,0];OC[0]=origin[0]-center[0],OC[1]=origin[1]-center[1],OC[2]=origin[2]-center[2];var a=squaredLength(direction),b=dotProduct(direction,OC),delta=b*b-a*(squaredLength(OC)-radius*radius);if(delta<0)return!1;var sqrtDelta=Math.sqrt(delta);return!((-b+sqrtDelta)/a<0)}function pointDist(p1,p2){var dx=p1[0]-p2[0],dy=p1[1]-p2[1],dz=p1[2]-p2[2];return Math.sqrt(dx*dx+dy*dy+dz*dz)}WebGLSpins.colormapImplementations={red:"\n          vec3 colormap(vec3 direction) {\n              return vec3(1.0, 0.0, 0.0);\n          }",redblue:"\n          vec3 colormap(vec3 direction) {\n              vec3 color_down = vec3(0.0, 0.0, 1.0);\n              vec3 color_up = vec3(1.0, 0.0, 0.0);\n              return mix(color_down, color_up, direction.z*0.5+0.5);\n          }",hue:"\n        float atan2(float y, float x) {\n            return x == 0.0 ? sign(y)*3.14159/2.0 : atan(y, x);\n        }\n        vec3 hsv2rgb(vec3 c) {\n            vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n            vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n            return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n        }\n        vec3 colormap(vec3 direction) {\n            vec2 xy = normalize(direction.yz);\n            float hue = atan2(xy.x, xy.y) / 3.14159 / 2.0;\n            return hsv2rgb(vec3(hue, 1.0, 1.0));\n        }"},WebGLSpins.renderers={},WebGLSpins.defaultOptions={},WebGLSpins.defaultOptions.verticalFieldOfView=45,WebGLSpins.defaultOptions.allowCameraMovement=!0,WebGLSpins.defaultOptions.colormapImplementation=WebGLSpins.colormapImplementations.red,WebGLSpins.defaultOptions.cameraLocation=[0,0,1],WebGLSpins.defaultOptions.centerLocation=[0,0,0],WebGLSpins.defaultOptions.upVector=[0,1,0],WebGLSpins.defaultOptions.backgroundColor=[0,0,0],WebGLSpins.defaultOptions.zRange=[-1,1],WebGLSpins.defaultOptions.boundingBox=null,WebGLSpins.defaultOptions.boundingBoxColor=[1,1,1],WebGLSpins.prototype.updateOptions=function(options){var changedOptions=[];for(var option in options)this._options.hasOwnProperty(option)?this._options[option]!==options[option]&&(this._options[option]=options[option],changedOptions.push(option)):console.warn("WebGLSpins does not recognize option '"+option+"'.");if(0!=changedOptions.length){if(-1!=changedOptions.indexOf("renderers")){for(var i=0;i<this._renderers.length;i++)this._renderers[i][0].cleanup();this._renderers=[];for(i=0;i<this._options.renderers.length;i++){var renderer=this._options.renderers[i],viewport=[0,0,1,1];typeof renderer==typeof[]&&(viewport=renderer[1],renderer=renderer[0]),this._renderers.push([new renderer(this),viewport])}}else for(i=0;i<this._renderers.length;i++)this._renderers[i][0].optionsHaveChanged(changedOptions);this.draw()}},WebGLSpins.prototype.updateSpins=function(instancePositions,instanceDirections){this._gl;if(this._instancePositionArray=new Float32Array(instancePositions),this._instanceDirectionArray=new Float32Array(instanceDirections),this._instancePositionArray.length==this._instanceDirectionArray.length)if(this._instancePositionArray.length%3==0){for(var i=0;i<this._renderers.length;i++)this._renderers[i][0].updateSpins(this._instancePositionArray,this._instanceDirectionArray);this.draw()}else console.error("The length of instancePositions and instanceDirections needs to be a multiple of 3");else console.error("instancePositions and instanceDirections need to be of equal length")},WebGLSpins.prototype.draw=function(){var gl=this._gl,width=this._canvas.clientWidth,height=this._canvas.clientHeight;this._canvas.width=width,this._canvas.height=height,gl.viewport(0,0,gl.drawingBufferWidth,gl.drawingBufferHeight),gl.clearColor(this._options.backgroundColor[0],this._options.backgroundColor[1],this._options.backgroundColor[2],1),gl.clear(gl.COLOR_BUFFER_BIT);for(var i=0;i<this._renderers.length;i++)gl.viewport(gl.drawingBufferWidth*this._renderers[i][1][0],gl.drawingBufferHeight*this._renderers[i][1][1],gl.drawingBufferWidth*this._renderers[i][1][2],gl.drawingBufferHeight*this._renderers[i][1][3]),gl.clear(gl.DEPTH_BUFFER_BIT),this._renderers[i][0].draw(gl.drawingBufferWidth*this._renderers[i][1][2],gl.drawingBufferHeight*this._renderers[i][1][3])},WebGLSpins.prototype._mergeOptions=function(options,defaultOptions){for(var option in this._options={},defaultOptions)this._options[option]=defaultOptions[option];for(var option in options)defaultOptions.hasOwnProperty(option)?this._options[option]=options[option]:console.warn("WebGLSpins does not recognize option '"+option+"'.")},WebGLSpins.prototype._initGLContext=function(){var gl=null;try{gl=this._canvas.getContext("webgl")||this._canvas.getContext("experimental-webgl")}catch(e){}if(gl){this._gl=gl,gl.enable(gl.DEPTH_TEST),gl.depthFunc(gl.LEQUAL),gl.enable(gl.CULL_FACE);for(var i=0;i<this._renderers.length;i++)this._renderers[i][0].initGLContext();this._gl_initialized=!0}else console.error("WebGLSpins was unable to initialize WebGL.")},WebGLSpins._createProgram=function(gl,vertexShaderSource,fragmentShaderSource,attributes){var vertexShader=gl.createShader(gl.VERTEX_SHADER);if(gl.shaderSource(vertexShader,vertexShaderSource),gl.compileShader(vertexShader),!gl.getShaderParameter(vertexShader,gl.COMPILE_STATUS))return console.error("vertex shader info log:\n"+gl.getShaderInfoLog(vertexShader)),null;var fragmentShader=gl.createShader(gl.FRAGMENT_SHADER);if(gl.shaderSource(fragmentShader,fragmentShaderSource),gl.compileShader(fragmentShader),!gl.getShaderParameter(fragmentShader,gl.COMPILE_STATUS))return console.error("fragment shader info log:\n"+gl.getShaderInfoLog(fragmentShader)),null;var program=gl.createProgram();gl.attachShader(program,vertexShader),gl.attachShader(program,fragmentShader);for(var i=0;i<attributes.length;i++)gl.bindAttribLocation(program,i,attributes[i]);return gl.linkProgram(program),gl.deleteShader(vertexShader),gl.deleteShader(fragmentShader),gl.getProgramParameter(program,gl.LINK_STATUS)?program:(console.error("program info log:\n"+gl.getProgramInfoLog(program)),null)},WebGLSpins.prototype._handleMouseDown=function(event){if(this._options.allowCameraMovement){this._mouseDown=!0,this._lastMouseX=event.clientX,this._lastMouseY=event.clientY;for(var minPos,minXY,width=this._canvas.clientWidth,height=this._canvas.clientHeight,mouseX=(event.clientX-16)/(.5*width)-1,mouseY=(event.clientY-82)/(.5*height)-1,invVP=matrix_invert(mmult(WebGLSpins._perspectiveProjectionMatrix(this._options.verticalFieldOfView,width/height,.1,1e4),WebGLSpins._lookAtMatrix(this._options.cameraLocation,this._options.centerLocation,this._options.upVector))),worldPos=mmult(invVP,[mouseX,-mouseY,1,1].map((x=>[x]))).map((x=>x[0])),dir=WebGLSpins._normalize(worldPos),arr=this._instancePositionArray,arrLen=arr.length/3,numArrows=Math.sqrt(arrLen),camPos=this._options.cameraLocation,i=0;i<arrLen;i++){var pos=[arr[3*i],arr[3*i+1],0];if(intersectRayWithSphere(pos,1,camPos,dir)&&(void 0===minPos||pointDist(pos,camPos)<pointDist(minPos,camPos))){minPos=pos;var x=i%numArrows;minXY=[x,(i-x)/numArrows]}}void 0!==minPos&&console.log("X:",minXY[0]+1,"Y:",minXY[1]+1)}},WebGLSpins.prototype._handleMouseUp=function(event){this._mouseDown=!1},WebGLSpins.prototype._handleMouseMove=function(event){if(this._options.allowCameraMovement&&this._mouseDown){var newX=event.clientX,newY=event.clientY,deltaX=newX-this._lastMouseX,deltaY=newY-this._lastMouseY;if(event.shiftKey)this.zoom(deltaY>0?1:-1);else{var forwardVector=WebGLSpins._difference(this._options.centerLocation,this._options.cameraLocation),cameraDistance=WebGLSpins._length(forwardVector);forwardVector=WebGLSpins._normalize(forwardVector),this._options.upVector=WebGLSpins._normalize(this._options.upVector);var rightVector=WebGLSpins._cross(forwardVector,this._options.upVector);if(this._options.upVector=WebGLSpins._cross(rightVector,forwardVector),this._options.upVector=WebGLSpins._normalize(this._options.upVector),event.altKey){var translation=[(deltaY/100*this._options.upVector[0]-deltaX/100*rightVector[0])*cameraDistance*.1,(deltaY/100*this._options.upVector[1]-deltaX/100*rightVector[1])*cameraDistance*.1,(deltaY/100*this._options.upVector[2]-deltaX/100*rightVector[2])*cameraDistance*.1];this._options.cameraLocation[0]+=translation[0],this._options.cameraLocation[1]+=translation[1],this._options.cameraLocation[2]+=translation[2],this._options.centerLocation[0]+=translation[0],this._options.centerLocation[1]+=translation[1],this._options.centerLocation[2]+=translation[2]}else{var l=Math.sqrt(deltaX*deltaX+deltaY*deltaY);if(l>0){var axis=[deltaX/l*this._options.upVector[0]+deltaY/l*rightVector[0],deltaX/l*this._options.upVector[1]+deltaY/l*rightVector[1],deltaX/l*this._options.upVector[2]+deltaY/l*rightVector[2]],rotationMatrix=WebGLSpins._rotationMatrix(axis,-.1*l);forwardVector=WebGLSpins._matrixMultiply(rotationMatrix,forwardVector),this._options.upVector=WebGLSpins._matrixMultiply(rotationMatrix,this._options.upVector),this._options.cameraLocation[0]=this._options.centerLocation[0]-cameraDistance*forwardVector[0],this._options.cameraLocation[1]=this._options.centerLocation[1]-cameraDistance*forwardVector[1],this._options.cameraLocation[2]=this._options.centerLocation[2]-cameraDistance*forwardVector[2]}}}this._lastMouseX=newX,this._lastMouseY=newY,this.draw()}},WebGLSpins.prototype._handleMouseScroll=function(event){if(this._options.allowCameraMovement){var delta=Math.max(-1,Math.min(1,event.wheelDelta||-event.detail));this.zoom(delta)}},WebGLSpins.prototype.zoom=function(delta){if(this._options.allowCameraMovement){var forwardVector=WebGLSpins._difference(this._options.centerLocation,this._options.cameraLocation);WebGLSpins._length(forwardVector)<2&&delta<1||(this._options.cameraLocation[0]=this._options.centerLocation[0]-(1+.02*delta)*forwardVector[0],this._options.cameraLocation[1]=this._options.centerLocation[1]-(1+.02*delta)*forwardVector[1],this._options.cameraLocation[2]=this._options.centerLocation[2]-(1+.02*delta)*forwardVector[2],this.draw())}},WebGLSpins._difference=function(a,b){return[a[0]-b[0],a[1]-b[1],a[2]-b[2]]},WebGLSpins._length=function(a){return Math.sqrt(a[0]*a[0]+a[1]*a[1]+a[2]*a[2])},WebGLSpins._normalize=function(a){var length=WebGLSpins._length(a);return[a[0]/length,a[1]/length,a[2]/length]},WebGLSpins._cross=function(a,b){return[a[1]*b[2]-a[2]*b[1],a[2]*b[0]-a[0]*b[2],a[0]*b[1]-a[1]*b[0]]},WebGLSpins._rotationMatrix=function(axis,angle){var c=Math.cos(Math.PI*angle/180),s=Math.sin(Math.PI*angle/180),x=axis[0],y=axis[1],z=axis[2];return[[x*x*(1-c)+c,x*y*(1-c)-z*s,x*z*(1-c)+y*s,0],[x*y*(1-c)+z*s,y*y*(1-c)+c,z*y*(1-c)-x*s,0],[x*z*(1-c)-y*s,z*y*(1-c)+x*s,z*z*(1-c)+c,0],[0,0,0,1]]},WebGLSpins._matrixMultiply=function(matrix,vector){for(var result=[0,0,0],i=0;i<3;i++){for(var j=0;j<3;j++)result[i]+=matrix[i][j]*vector[j];result[i]+=matrix[i][3]}return result},WebGLSpins._perspectiveProjectionMatrix=function(verticalFieldOfView,aspectRatio,zNear,zFar){var f=1/Math.tan(verticalFieldOfView*Math.PI/180/2);return[[f/aspectRatio,0,0,0],[0,f,0,0],[0,0,(zNear+zFar)/(zNear-zFar),2*zFar*zNear/(zNear-zFar)],[0,0,-1,0]]},WebGLSpins._orthographicProjectionMatrix=function(left,right,bottom,top,near,far){return[[2/(right-left),0,0,(right+left)/(right-left)],[0,2/(top-bottom),0,(top+bottom)/(top-bottom)],[0,0,2/(far-near),(far+near)/(far-near)],[0,0,0,1]]},WebGLSpins._lookAtMatrix=function(cameraLocation,centerLocation,upVector){var forwardVector=WebGLSpins._difference(centerLocation,cameraLocation);forwardVector=WebGLSpins._normalize(forwardVector),upVector=WebGLSpins._normalize(upVector);var rightVector=WebGLSpins._cross(forwardVector,upVector);rightVector=WebGLSpins._normalize(rightVector),upVector=WebGLSpins._cross(rightVector,forwardVector);var matrix=[[rightVector[0],rightVector[1],rightVector[2],0],[upVector[0],upVector[1],upVector[2],0],[-forwardVector[0],-forwardVector[1],-forwardVector[2],0],[0,0,0,1]],translationVector=WebGLSpins._matrixMultiply(matrix,cameraLocation);return matrix[0][3]=-translationVector[0],matrix[1][3]=-translationVector[1],matrix[2][3]=-translationVector[2],matrix},WebGLSpins._toFloat32Array=function(matrix){return new Float32Array([matrix[0][0],matrix[1][0],matrix[2][0],matrix[3][0],matrix[0][1],matrix[1][1],matrix[2][1],matrix[3][1],matrix[0][2],matrix[1][2],matrix[2][2],matrix[3][2],matrix[0][3],matrix[1][3],matrix[2][3],matrix[3][3]])},WebGLSpins._ArrowRenderer=function(webglspins){this._webglspins=webglspins,this._options=webglspins._options,this._program=null,this._vbo=null,this._ibo=null,this._instancePositionVbo=0,this._instanceDirectionVbo=0,this._numIndices=0,this._numInstances=0,this._boundingBoxRenderer=new WebGLSpins._BoundingBoxRenderer(webglspins),webglspins._gl_initialized&&this.initGLContext(),null!=webglspins._instancePositionArray&&null!=webglspins._instanceDirectionArray&&this.updateSpins(webglspins._instancePositionArray,webglspins._instanceDirectionArray)},WebGLSpins.renderers.ARROWS=WebGLSpins._ArrowRenderer,WebGLSpins.defaultOptions.coneHeight=.6,WebGLSpins.defaultOptions.coneRadius=.25,WebGLSpins.defaultOptions.cylinderHeight=.7,WebGLSpins.defaultOptions.cylinderRadius=.125,WebGLSpins.defaultOptions.levelOfDetail=20,WebGLSpins.defaultOptions.renderers=[WebGLSpins.renderers.ARROWS],WebGLSpins._ArrowRenderer.prototype.optionsHaveChanged=function(changedOptions){var arrayContainsAny=function(array,values){for(var i=0;i<values.length;i++)if(~array.indexOf(values[i]))return!0;return!1};arrayContainsAny(changedOptions,["coneHeight","coneRadius","cylinderHeight","cylinderRadius"])&&this._updateVertexData(),arrayContainsAny(changedOptions,["colormapImplementation"])&&this._updateShaderProgram(),this._boundingBoxRenderer.optionsHaveChanged(changedOptions)},WebGLSpins._ArrowRenderer.prototype.updateSpins=function(instancePositionArray,instanceDirectionArray){var gl=this._webglspins._gl;this._numInstances=instancePositionArray.length/3,gl.bindBuffer(gl.ARRAY_BUFFER,this._instancePositionVbo),gl.bufferData(gl.ARRAY_BUFFER,instancePositionArray,gl.STREAM_DRAW),gl.bindBuffer(gl.ARRAY_BUFFER,this._instanceDirectionVbo),gl.bufferData(gl.ARRAY_BUFFER,instanceDirectionArray,gl.STREAM_DRAW),this._boundingBoxRenderer.updateSpins(instancePositionArray,instanceDirectionArray)},WebGLSpins._ArrowRenderer.prototype.draw=function(width,height){var gl=this._webglspins._gl;if(!(this._numInstances<=0)){gl.bindBuffer(gl.ARRAY_BUFFER,this._vbo),gl.vertexAttribPointer(0,3,gl.FLOAT,!1,24,0),gl.enableVertexAttribArray(0),gl.vertexAttribPointer(1,3,gl.FLOAT,!1,24,12),gl.enableVertexAttribArray(1),gl.bindBuffer(gl.ARRAY_BUFFER,this._instancePositionVbo),gl.vertexAttribPointer(2,3,gl.FLOAT,!1,0,0),gl.enableVertexAttribArray(2),gl.vertexAttribDivisor(2,1),gl.bindBuffer(gl.ARRAY_BUFFER,this._instanceDirectionVbo),gl.vertexAttribPointer(3,3,gl.FLOAT,!1,0,0),gl.enableVertexAttribArray(3),gl.vertexAttribDivisor(3,1),gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this._ibo),gl.useProgram(this._program);var projectionMatrix=WebGLSpins._perspectiveProjectionMatrix(this._options.verticalFieldOfView,width/height,.1,1e4);gl.uniformMatrix4fv(gl.getUniformLocation(this._program,"uProjectionMatrix"),!1,WebGLSpins._toFloat32Array(projectionMatrix));var modelviewMatrix=WebGLSpins._lookAtMatrix(this._options.cameraLocation,this._options.centerLocation,this._options.upVector);gl.uniformMatrix4fv(gl.getUniformLocation(this._program,"uModelviewMatrix"),!1,WebGLSpins._toFloat32Array(modelviewMatrix));var lightPosition=WebGLSpins._matrixMultiply(modelviewMatrix,this._options.cameraLocation);gl.uniform3f(gl.getUniformLocation(this._program,"uLightPosition"),lightPosition[0],lightPosition[1],lightPosition[2]),gl.uniform2f(gl.getUniformLocation(this._program,"uZRange"),this._options.zRange[0],this._options.zRange[1]),gl.drawElementsInstanced(gl.TRIANGLES,this._numIndices,gl.UNSIGNED_SHORT,null,this._numInstances),this._boundingBoxRenderer.draw(width,height)}},WebGLSpins._ArrowRenderer.prototype.initGLContext=function(){var gl=this._webglspins._gl,angle_instanced_arrays_ext=gl.getExtension("ANGLE_instanced_arrays");angle_instanced_arrays_ext?(gl.drawArraysInstanced=angle_instanced_arrays_ext.drawArraysInstancedANGLE.bind(angle_instanced_arrays_ext),gl.drawElementsInstanced=angle_instanced_arrays_ext.drawElementsInstancedANGLE.bind(angle_instanced_arrays_ext),gl.vertexAttribDivisor=angle_instanced_arrays_ext.vertexAttribDivisorANGLE.bind(angle_instanced_arrays_ext),gl.VERTEX_ATTRIB_ARRAY_DIVISOR=angle_instanced_arrays_ext.VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE,this._vbo=gl.createBuffer(),gl.bindBuffer(gl.ARRAY_BUFFER,this._vbo),gl.vertexAttribPointer(0,3,gl.FLOAT,!1,24,0),gl.enableVertexAttribArray(0),gl.vertexAttribPointer(1,3,gl.FLOAT,!1,24,12),gl.enableVertexAttribArray(1),this._ibo=gl.createBuffer(),gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this._ibo),this._numIndices=0,this._instancePositionVbo=gl.createBuffer(),gl.bindBuffer(gl.ARRAY_BUFFER,this._instancePositionVbo),gl.vertexAttribPointer(2,3,gl.FLOAT,!1,0,0),gl.enableVertexAttribArray(2),gl.vertexAttribDivisor(2,1),this._instanceDirectionVbo=gl.createBuffer(),gl.bindBuffer(gl.ARRAY_BUFFER,this._instanceDirectionVbo),gl.vertexAttribPointer(3,3,gl.FLOAT,!1,0,0),gl.enableVertexAttribArray(3),gl.vertexAttribDivisor(3,1),this._numInstances=0,this._updateShaderProgram(),this._updateVertexData(),this._boundingBoxRenderer.initGLContext()):console.error("WebGL does not support ANGLE_instanced_arrays required by WebGLSpins")},WebGLSpins._ArrowRenderer.prototype._updateShaderProgram=function(){var gl=this._webglspins._gl;this._program&&gl.deleteProgram(this._program);var program=WebGLSpins._createProgram(gl,"\n        #version 100\n        precision highp float;\n\n        uniform mat4 uProjectionMatrix;\n        uniform mat4 uModelviewMatrix;\n        uniform vec2 uZRange;\n        attribute vec3 ivPosition;\n        attribute vec3 ivNormal;\n        attribute vec3 ivInstanceOffset;\n        attribute vec3 ivInstanceDirection;\n        varying vec3 vfPosition;\n        varying vec3 vfNormal;\n        varying vec3 vfColor;\n\n        mat3 matrixFromDirection(vec3 direction) {\n          float c = direction.z;\n          float s = length(direction.xy);\n          float x = 1.0;\n          float y = 0.0;\n          if (s > 0.0001) {\n            x = -direction.y / s;\n            y = direction.x / s;\n          }\n          mat3 matrix;\n          matrix[0][0] = x*x*(1.0-c)+c;\n          matrix[0][1] = y*x*(1.0-c);\n          matrix[0][2] = -y*s;\n          matrix[1][0] = x*y*(1.0-c);\n          matrix[1][1] = y*y*(1.0-c)+c;\n          matrix[1][2] = x*s;\n          matrix[2][0] = y*s;\n          matrix[2][1] = -x*s;\n          matrix[2][2] = c;\n          return matrix;\n        }\n\n        vec3 colormap(vec3 direction);\n\n        void main(void) {\n          vfColor = colormap(normalize(ivInstanceDirection));\n          mat3 instanceMatrix = matrixFromDirection(ivInstanceDirection);\n          vfNormal = (uModelviewMatrix * vec4(instanceMatrix*ivNormal, 0.0)).xyz;\n          vfPosition = (uModelviewMatrix * vec4(instanceMatrix*ivPosition+ivInstanceOffset, 1.0)).xyz;\n          if (ivInstanceDirection.z >= uZRange.x && ivInstanceDirection.z <= uZRange.y) {\n            gl_Position = uProjectionMatrix * vec4(vfPosition, 1.0);\n          } else {\n            gl_Position = vec4(2.0, 2.0, 2.0, 0.0);\n          }\n        }\n        "+this._options.colormapImplementation,"\n        #version 100\n        precision highp float;\n\n        uniform vec3 uLightPosition;\n        varying vec3 vfPosition;\n        varying vec3 vfNormal;\n        varying vec3 vfColor;\n\n        void main(void) {\n          vec3 cameraLocation = vec3(0, 0, 0);\n          vec3 normal = normalize(vfNormal);\n          vec3 lightDirection = normalize(uLightPosition-vfPosition);\n          vec3 reflectionDirection = normalize(reflect(lightDirection, normal));\n          float specular = 0.2*pow(max(0.0, -reflectionDirection.z), 8.0);\n          float diffuse = 0.7*max(0.0, dot(normal, lightDirection));\n          float ambient = 0.2;\n          gl_FragColor = vec4((ambient+diffuse)*vfColor + specular*vec3(1, 1, 1), 1.0);\n        }\n        ",["ivPosition","ivNormal","ivInstanceOffset","ivInstanceDirection"]);null!=program&&(this._program=program)},WebGLSpins._ArrowRenderer.prototype._updateVertexData=function(){var i,gl=this._webglspins._gl,levelOfDetail=this._options.levelOfDetail,coneHeight=this._options.coneHeight,coneRadius=this._options.coneRadius,cylinderHeight=this._options.cylinderHeight,cylinderRadius=this._options.cylinderRadius;levelOfDetail<3&&(levelOfDetail=3),coneHeight<0&&(coneHeight=0),coneRadius<0&&(coneRadius=0),cylinderHeight<0&&(cylinderHeight=0),cylinderRadius<0&&(cylinderRadius=0);var alpha,position,baseNormal=[0,0,-1],zOffset=(cylinderHeight-coneHeight)/2,l=Math.sqrt(coneRadius*coneRadius+coneHeight*coneHeight),f1=coneRadius/l,f2=coneHeight/l,vertexData=[];for(Array.prototype.push.apply(vertexData,[0,0,zOffset+coneHeight]),Array.prototype.push.apply(vertexData,[0,0,0]),i=0;i<levelOfDetail;i++){alpha=2*Math.PI*i/levelOfDetail,position=[coneRadius*Math.cos(alpha),coneRadius*Math.sin(alpha),zOffset];var normal=[f2*Math.cos(alpha),f2*Math.sin(alpha),f1];Array.prototype.push.apply(vertexData,position),Array.prototype.push.apply(vertexData,normal)}for(i=0;i<levelOfDetail;i++)alpha=2*Math.PI*i/levelOfDetail,position=[coneRadius*Math.cos(alpha),coneRadius*Math.sin(alpha),zOffset],Array.prototype.push.apply(vertexData,position),Array.prototype.push.apply(vertexData,baseNormal);for(i=0;i<levelOfDetail;i++)alpha=2*Math.PI*i/levelOfDetail,position=[cylinderRadius*Math.cos(alpha),cylinderRadius*Math.sin(alpha),zOffset-cylinderHeight],Array.prototype.push.apply(vertexData,position),Array.prototype.push.apply(vertexData,baseNormal);for(i=0;i<levelOfDetail;i++)alpha=2*Math.PI*i/levelOfDetail,position=[cylinderRadius*Math.cos(alpha),cylinderRadius*Math.sin(alpha),zOffset-cylinderHeight],normal=[Math.cos(alpha),Math.sin(alpha),0],Array.prototype.push.apply(vertexData,position),Array.prototype.push.apply(vertexData,normal);for(i=0;i<levelOfDetail;i++)alpha=2*Math.PI*i/levelOfDetail,position=[cylinderRadius*Math.cos(alpha),cylinderRadius*Math.sin(alpha),zOffset],normal=[Math.cos(alpha),Math.sin(alpha),0],Array.prototype.push.apply(vertexData,position),Array.prototype.push.apply(vertexData,normal);var triangleIndices,indices=[];for(i=0;i<levelOfDetail;i++)triangleIndices=[1+i,1+(i+1)%levelOfDetail,0],Array.prototype.push.apply(indices,triangleIndices);for(i=0;i<levelOfDetail;i++)triangleIndices=[levelOfDetail+1,levelOfDetail+1+(i+1)%levelOfDetail,levelOfDetail+1+i],Array.prototype.push.apply(indices,triangleIndices);for(i=0;i<levelOfDetail;i++)triangleIndices=[2*levelOfDetail+1,2*levelOfDetail+1+(i+1)%levelOfDetail,2*levelOfDetail+1+i],Array.prototype.push.apply(indices,triangleIndices);for(i=0;i<levelOfDetail;i++)triangleIndices=[3*levelOfDetail+1+i,3*levelOfDetail+1+(i+1)%levelOfDetail,4*levelOfDetail+1+i],Array.prototype.push.apply(indices,triangleIndices),triangleIndices=[4*levelOfDetail+1+i,3*levelOfDetail+1+(i+1)%levelOfDetail,4*levelOfDetail+1+(i+1)%levelOfDetail],Array.prototype.push.apply(indices,triangleIndices);gl.bindBuffer(gl.ARRAY_BUFFER,this._vbo),gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(vertexData),gl.STATIC_DRAW),gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this._ibo),gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,new Int16Array(indices),gl.STATIC_DRAW),this._numIndices=indices.length},WebGLSpins._ArrowRenderer.prototype.cleanup=function(){var gl=this._webglspins._gl;gl.deleteBuffer(this._vbo),gl.deleteBuffer(this._ibo),gl.deleteBuffer(this._instancePositionVbo),gl.deleteBuffer(this._instanceDirectionVbo),gl.deleteProgram(this._program),gl.disableVertexAttribArray(0),gl.disableVertexAttribArray(1),gl.disableVertexAttribArray(2),gl.disableVertexAttribArray(3),this._boundingBoxRenderer.cleanup()},WebGLSpins._SurfaceRenderer=function(webglspins){this._webglspins=webglspins,this._options=webglspins._options,this._program=null,this._ibo=null,this._instancePositionVbo=0,this._instanceDirectionVbo=0,this._numIndices=0,this._boundingBoxRenderer=new WebGLSpins._BoundingBoxRenderer(webglspins),webglspins._gl_initialized&&this.initGLContext(),null!=webglspins._instancePositionArray&&null!=webglspins._instanceDirectionArray&&this.updateSpins(webglspins._instancePositionArray,webglspins._instanceDirectionArray)},WebGLSpins.renderers.SURFACE=WebGLSpins._SurfaceRenderer,WebGLSpins.defaultOptions.surfaceIndices=[],WebGLSpins._SurfaceRenderer.prototype.optionsHaveChanged=function(changedOptions){var arrayContainsAny=function(array,values){for(var i=0;i<values.length;i++)if(~array.indexOf(values[i]))return!0;return!1};arrayContainsAny(changedOptions,["surfaceIndices"])&&this._updateSurfaceIndices(),arrayContainsAny(changedOptions,["colormapImplementation"])&&this._updateShaderProgram(),this._boundingBoxRenderer.optionsHaveChanged(changedOptions)},WebGLSpins._SurfaceRenderer.prototype.updateSpins=function(instancePositionArray,instanceDirectionArray){var gl=this._webglspins._gl;this._numInstances=instancePositionArray.length/3,gl.bindBuffer(gl.ARRAY_BUFFER,this._instancePositionVbo),gl.bufferData(gl.ARRAY_BUFFER,instancePositionArray,gl.STREAM_DRAW),gl.bindBuffer(gl.ARRAY_BUFFER,this._instanceDirectionVbo),gl.bufferData(gl.ARRAY_BUFFER,instanceDirectionArray,gl.STREAM_DRAW),this._boundingBoxRenderer.updateSpins(instancePositionArray,instanceDirectionArray)},WebGLSpins._SurfaceRenderer.prototype.draw=function(width,height){var gl=this._webglspins._gl;if(!(this._numIndices<3)){gl.bindBuffer(gl.ARRAY_BUFFER,this._instancePositionVbo),gl.vertexAttribPointer(0,3,gl.FLOAT,!1,0,0),gl.enableVertexAttribArray(0),gl.bindBuffer(gl.ARRAY_BUFFER,this._instanceDirectionVbo),gl.vertexAttribPointer(1,3,gl.FLOAT,!1,0,0),gl.enableVertexAttribArray(1),gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this._ibo),gl.useProgram(this._program);var projectionMatrix=WebGLSpins._perspectiveProjectionMatrix(this._options.verticalFieldOfView,width/height,.1,1e4);gl.uniformMatrix4fv(gl.getUniformLocation(this._program,"uProjectionMatrix"),!1,WebGLSpins._toFloat32Array(projectionMatrix));var modelviewMatrix=WebGLSpins._lookAtMatrix(this._options.cameraLocation,this._options.centerLocation,this._options.upVector);gl.uniformMatrix4fv(gl.getUniformLocation(this._program,"uModelviewMatrix"),!1,WebGLSpins._toFloat32Array(modelviewMatrix)),gl.uniform2f(gl.getUniformLocation(this._program,"uZRange"),this._options.zRange[0],this._options.zRange[1]),gl.disable(gl.CULL_FACE),gl.drawElements(gl.TRIANGLES,this._numIndices,gl.UNSIGNED_INT,null),gl.enable(gl.CULL_FACE),this._boundingBoxRenderer.draw(width,height)}},WebGLSpins._SurfaceRenderer.prototype.initGLContext=function(){var gl=this._webglspins._gl;gl.getExtension("OES_element_index_uint")?(this._ibo=gl.createBuffer(),gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this._ibo),this._numIndices=0,this._instancePositionVbo=gl.createBuffer(),gl.bindBuffer(gl.ARRAY_BUFFER,this._instancePositionVbo),gl.vertexAttribPointer(0,3,gl.FLOAT,!1,0,0),gl.enableVertexAttribArray(0),this._instanceDirectionVbo=gl.createBuffer(),gl.bindBuffer(gl.ARRAY_BUFFER,this._instanceDirectionVbo),gl.vertexAttribPointer(1,3,gl.FLOAT,!1,0,0),gl.enableVertexAttribArray(1),this._updateShaderProgram(),this._updateSurfaceIndices(),this._boundingBoxRenderer.initGLContext()):console.error("WebGL does not support OES_element_index_uint required by WebGLSpins")},WebGLSpins._SurfaceRenderer.prototype._updateShaderProgram=function(){var gl=this._webglspins._gl;this._program&&gl.deleteProgram(this._program);var program=WebGLSpins._createProgram(gl,"\n        #version 100\n        precision highp float;\n\n        uniform mat4 uProjectionMatrix;\n        uniform mat4 uModelviewMatrix;\n        attribute vec3 ivPosition;\n        attribute vec3 ivDirection;\n        varying vec3 vfDirection;\n\n        void main(void) {\n          vfDirection = normalize(ivDirection);\n          gl_Position = uProjectionMatrix * (uModelviewMatrix * vec4(ivPosition, 1.0));\n        }\n        ","\n        #version 100\n        precision highp float;\n\n        uniform vec2 uZRange;\n        varying vec3 vfDirection;\n\n        vec3 colormap(vec3 direction);\n\n        void main(void) {\n          if (vfDirection.z >= uZRange.x && vfDirection.z <= uZRange.y) {\n            vec3 color = colormap(normalize(vfDirection));\n            gl_FragColor = vec4(color, 1.0);\n          } else {\n            discard;\n          }\n        }\n        "+this._options.colormapImplementation,["ivPosition","ivDirection"]);null!=program&&(this._program=program)},WebGLSpins._SurfaceRenderer.prototype._updateSurfaceIndices=function(){var gl=this._webglspins._gl,surfaceIndices=this._options.surfaceIndices;surfaceIndices.length<3?this._numIndices=0:(gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this._ibo),gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,new Int32Array(surfaceIndices),gl.STATIC_DRAW),this._numIndices=surfaceIndices.length)},WebGLSpins._SurfaceRenderer.prototype.cleanup=function(){var gl=this._webglspins._gl;gl.deleteBuffer(this._instancePositionVbo),gl.deleteBuffer(this._instanceDirectionVbo),gl.deleteBuffer(this._ibo),gl.deleteProgram(this._program),gl.disableVertexAttribArray(0),gl.disableVertexAttribArray(1),this._boundingBoxRenderer.cleanup()},WebGLSpins.generateCartesianSurfaceIndices=function(nx,ny){for(var surfaceIndices=[],i=0;i<ny-1;i++)for(var j=0;j<nx-1;j++){var square_indices=[i*nx+j,i*nx+j+1,(i+1)*nx+j,(i+1)*nx+j,i*nx+j+1,(i+1)*nx+j+1];Array.prototype.push.apply(surfaceIndices,square_indices)}return surfaceIndices},WebGLSpins._SphereRenderer=function(webglspins){this._webglspins=webglspins,this._options=webglspins._options,this._program=null,this._instanceDirectionVbo=null,this._numInstances=0,webglspins._gl_initialized&&this.initGLContext(),null!=webglspins._instanceDirectionArray&&this.updateSpins(null,webglspins._instanceDirectionArray)},WebGLSpins.renderers.SPHERE=WebGLSpins._SphereRenderer,WebGLSpins.defaultOptions.pointSizeRange=[1,1],WebGLSpins.defaultOptions.innerSphereRadius=.95,WebGLSpins.defaultOptions.useSphereFakePerspective=!1,WebGLSpins._SphereRenderer.prototype.optionsHaveChanged=function(changedOptions){(function(array,values){for(var i=0;i<values.length;i++)if(~array.indexOf(values[i]))return!0;return!1})(changedOptions,["colormapImplementation"])&&this._updateShaderProgram()},WebGLSpins._SphereRenderer.prototype.updateSpins=function(instancePositionArray,instanceDirectionArray){var gl=this._webglspins._gl;this._numInstances=instanceDirectionArray.length/3,gl.bindBuffer(gl.ARRAY_BUFFER,this._instanceDirectionVbo),gl.bufferData(gl.ARRAY_BUFFER,instanceDirectionArray,gl.STREAM_DRAW)},WebGLSpins._SphereRenderer.prototype.draw=function(width,height){var gl=this._webglspins._gl;if(this._options.innerSphereRadius>0&&(this._options.innerSphereRadius>.99&&(this._options.innerSphereRadius=.99),gl.useProgram(this._program2),gl.bindBuffer(gl.ARRAY_BUFFER,this._fakeSphereVbo),gl.vertexAttribPointer(0,3,gl.FLOAT,!1,0,0),gl.enableVertexAttribArray(0),gl.uniform1f(gl.getUniformLocation(this._program2,"uAspectRatio"),width/height),gl.uniform1f(gl.getUniformLocation(this._program2,"uInnerSphereRadius"),this._options.innerSphereRadius),gl.disable(gl.CULL_FACE),gl.depthMask(!1),gl.drawArrays(gl.TRIANGLES,0,6),gl.depthMask(!0),gl.enable(gl.CULL_FACE)),!(this._numInstances<=0)){gl.bindBuffer(gl.ARRAY_BUFFER,this._instanceDirectionVbo),gl.vertexAttribPointer(0,3,gl.FLOAT,!1,0,0),gl.enableVertexAttribArray(0),gl.useProgram(this._program);var projectionMatrix=WebGLSpins._orthographicProjectionMatrix(-width/height,width/height,-1,1,2,0);gl.uniformMatrix4fv(gl.getUniformLocation(this._program,"uProjectionMatrix"),!1,WebGLSpins._toFloat32Array(projectionMatrix));var modelviewMatrix=WebGLSpins._lookAtMatrix(WebGLSpins._normalize(WebGLSpins._difference(this._options.cameraLocation,this._options.centerLocation)),[0,0,0],this._options.upVector);gl.uniformMatrix4fv(gl.getUniformLocation(this._program,"uModelviewMatrix"),!1,WebGLSpins._toFloat32Array(modelviewMatrix)),gl.uniform2f(gl.getUniformLocation(this._program,"uZRange"),this._options.zRange[0],this._options.zRange[1]),gl.uniform2f(gl.getUniformLocation(this._program,"uPointSizeRange"),Math.floor(this._options.pointSizeRange[0]),Math.floor(this._options.pointSizeRange[1])),gl.uniform1f(gl.getUniformLocation(this._program,"uAspectRatio"),width/height),gl.uniform1f(gl.getUniformLocation(this._program,"uInnerSphereRadius"),this._options.innerSphereRadius),this._options.useSphereFakePerspective?gl.uniform1f(gl.getUniformLocation(this._program,"uUseFakePerspective"),1):gl.uniform1f(gl.getUniformLocation(this._program,"uUseFakePerspective"),0),gl.disable(gl.CULL_FACE),gl.drawArrays(gl.POINTS,0,this._numInstances),gl.enable(gl.CULL_FACE)}},WebGLSpins._SphereRenderer.prototype.initGLContext=function(){var gl=this._webglspins._gl;this._instanceDirectionVbo=gl.createBuffer(),gl.bindBuffer(gl.ARRAY_BUFFER,this._instanceDirectionVbo),gl.vertexAttribPointer(0,3,gl.FLOAT,!1,0,0),gl.enableVertexAttribArray(0),this._fakeSphereVbo=gl.createBuffer(),gl.bindBuffer(gl.ARRAY_BUFFER,this._fakeSphereVbo),gl.vertexAttribPointer(0,3,gl.FLOAT,!1,0,0),gl.bufferData(gl.ARRAY_BUFFER,new Float32Array([-1,-1,0,1,-1,0,-1,1,0,-1,1,0,1,-1,0,1,1,0]),gl.STATIC_DRAW),gl.enableVertexAttribArray(0),this._updateShaderProgram()},WebGLSpins._SphereRenderer.prototype._updateShaderProgram=function(){var gl=this._webglspins._gl;this._program&&gl.deleteProgram(this._program);var program=WebGLSpins._createProgram(gl,"\n        #version 100\n        precision highp float;\n\n        uniform mat4 uProjectionMatrix;\n        uniform mat4 uModelviewMatrix;\n        uniform vec2 uPointSizeRange;\n        uniform float uAspectRatio;\n        uniform float uInnerSphereRadius;\n        uniform float uUseFakePerspective;\n        attribute vec3 ivDirection;\n        varying vec3 vfDirection;\n\n        void main(void) {\n          vfDirection = normalize(ivDirection);\n          gl_Position = uProjectionMatrix * uModelviewMatrix * vec4(vfDirection*0.99, 1.0);\n          vec2 clipPosition = vec2(gl_Position.x * uAspectRatio, gl_Position.y);\n          float clipRadius = length(clipPosition);\n          float rotatedDirectionZ = dot(vec3(uModelviewMatrix[0][2], uModelviewMatrix[1][2], uModelviewMatrix[2][2]), vfDirection);\n          if ((clipRadius <= uInnerSphereRadius) && (rotatedDirectionZ < 0.0)) {\n            gl_Position = vec4(2.0, 2.0, 2.0, 1.0);\n          }\n          gl_PointSize = uPointSizeRange.x + (uPointSizeRange.y-uPointSizeRange.x) * sqrt(max(0.0, 1.0-clipRadius*clipRadius)) * (5.0-uUseFakePerspective*gl_Position.z) / 5.0;\n        }\n        ","\n        #version 100\n        precision highp float;\n\n        uniform vec2 uZRange;\n        varying vec3 vfDirection;\n\n        vec3 colormap(vec3 direction);\n\n        void main(void) {\n          if (vfDirection.z >= uZRange.x && vfDirection.z <= uZRange.y) {\n            vec3 color = colormap(normalize(vfDirection));\n            gl_FragColor = vec4(color, 1.0);\n          } else {\n            discard;\n          }\n        }\n        "+this._options.colormapImplementation,["ivDirection"]);if(null!=program){var program2=WebGLSpins._createProgram(gl,"\n        #version 100\n        precision highp float;\n\n        uniform float uAspectRatio;\n        uniform float uInnerSphereRadius;\n        attribute vec3 ivPosition;\n        varying vec3 vfPosition;\n\n        void main(void) {\n          vfPosition = ivPosition;\n          gl_Position = vec4(vfPosition.xy*vec2(uInnerSphereRadius/uAspectRatio, uInnerSphereRadius), 0.0, 1.0);\n        }\n        ","\n        #version 100\n        precision highp float;\n\n        varying vec3 vfPosition;\n\n\n        void main(void) {\n          float l = length(vfPosition);\n          if (l > 1.0) {\n            discard;\n          } else {\n            vec3 color = 0.2+0.4*sqrt(1.0-l*l)*vec3(1.0, 1.0, 1.0);\n            gl_FragColor = vec4(color, 1.0);\n          }\n        }\n        ",["ivPosition"]);null!=program2&&(this._program=program,this._program2=program2)}},WebGLSpins._SphereRenderer.prototype.cleanup=function(){var gl=this._webglspins._gl;gl.deleteBuffer(this._instanceDirectionVbo),gl.deleteBuffer(this._fakeSphereVbo),gl.deleteProgram(this._program),gl.deleteProgram(this._program2),gl.disableVertexAttribArray(0)},WebGLSpins._CoordinateSystemRenderer=function(webglspins){this._webglspins=webglspins,this._options=webglspins._options,this._program=null,this._lineVbo=null,webglspins._gl_initialized&&this.initGLContext()},WebGLSpins.renderers.COORDINATESYSTEM=WebGLSpins._CoordinateSystemRenderer,WebGLSpins._CoordinateSystemRenderer.prototype.optionsHaveChanged=function(changedOptions){(function(array,values){for(var i=0;i<values.length;i++)if(~array.indexOf(values[i]))return!0;return!1})(changedOptions,["colormapImplementation"])&&this._updateShaderProgram()},WebGLSpins._CoordinateSystemRenderer.prototype.updateSpins=function(instancePositionArray,instanceDirectionArray){},WebGLSpins._CoordinateSystemRenderer.prototype.draw=function(width,height){var gl=this._webglspins._gl;gl.bindBuffer(gl.ARRAY_BUFFER,this._lineVbo),gl.vertexAttribPointer(0,3,gl.FLOAT,!1,0,0),gl.enableVertexAttribArray(0),gl.useProgram(this._program);var projectionMatrix=WebGLSpins._perspectiveProjectionMatrix(this._options.verticalFieldOfView,width/height,.1,1e4);gl.uniformMatrix4fv(gl.getUniformLocation(this._program,"uProjectionMatrix"),!1,WebGLSpins._toFloat32Array(projectionMatrix));var modelviewMatrix=WebGLSpins._lookAtMatrix(WebGLSpins._normalize(WebGLSpins._difference(this._options.cameraLocation,this._options.centerLocation)),[0,0,0],this._options.upVector);gl.uniformMatrix4fv(gl.getUniformLocation(this._program,"uModelviewMatrix"),!1,WebGLSpins._toFloat32Array(modelviewMatrix)),gl.uniform1f(gl.getUniformLocation(this._program,"uSinHalfVFoV"),Math.sin(.5*this._options.verticalFieldOfView*Math.PI/180)),gl.disable(gl.CULL_FACE),gl.drawArrays(gl.LINES,0,6),gl.enable(gl.CULL_FACE)},WebGLSpins._CoordinateSystemRenderer.prototype.initGLContext=function(){var gl=this._webglspins._gl;this._lineVbo=gl.createBuffer(),gl.bindBuffer(gl.ARRAY_BUFFER,this._lineVbo),gl.bufferData(gl.ARRAY_BUFFER,new Float32Array([0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1]),gl.STATIC_DRAW),gl.vertexAttribPointer(0,3,gl.FLOAT,!1,0,0),gl.enableVertexAttribArray(0),this._updateShaderProgram()},WebGLSpins._CoordinateSystemRenderer.prototype._updateShaderProgram=function(){var gl=this._webglspins._gl;this._program&&gl.deleteProgram(this._program);var program=WebGLSpins._createProgram(gl,"\n        #version 100\n        precision highp float;\n\n        uniform mat4 uProjectionMatrix;\n        uniform mat4 uModelviewMatrix;\n        uniform float uSinHalfVFoV;\n        attribute vec3 ivDirection;\n        varying vec3 vfDirection;\n\n        void main(void) {\n          vfDirection = ivDirection;\n          gl_Position = uProjectionMatrix * (uModelviewMatrix * vec4(ivDirection*uSinHalfVFoV*0.99, 1.0));\n        }\n        ","\n        #version 100\n        precision highp float;\n\n        uniform vec2 uZRange;\n        varying vec3 vfDirection;\n\n        vec3 colormap(vec3 direction);\n\n        void main(void) {\n          vec3 color = colormap(normalize(vfDirection));\n          gl_FragColor = vec4(color, 1.0);\n        }\n        "+this._options.colormapImplementation,["ivDirection"]);null!=program&&(this._program=program)},WebGLSpins._CoordinateSystemRenderer.prototype.cleanup=function(){var gl=this._webglspins._gl;gl.deleteBuffer(this._lineVbo),gl.deleteProgram(this._program),gl.disableVertexAttribArray(0)},WebGLSpins._BoundingBoxRenderer=function(webglspins){this._webglspins=webglspins,this._options=webglspins._options,this._program=null,this._lineVbo=null,this._gl_initialized=!1,webglspins._gl_initialized&&this.initGLContext()},WebGLSpins._BoundingBoxRenderer.prototype.optionsHaveChanged=function(changedOptions){},WebGLSpins._BoundingBoxRenderer.prototype.updateSpins=function(instancePositionArray,instanceDirectionArray){},WebGLSpins._BoundingBoxRenderer.prototype.draw=function(width,height){var gl=this._webglspins._gl;if(null!=this._options.boundingBox){var xmin=this._options.boundingBox[0],ymin=this._options.boundingBox[1],zmin=this._options.boundingBox[2],xmax=this._options.boundingBox[3],ymax=this._options.boundingBox[4],zmax=this._options.boundingBox[5],red=this._options.boundingBoxColor[0],green=this._options.boundingBoxColor[1],blue=this._options.boundingBoxColor[2];gl.bindBuffer(gl.ARRAY_BUFFER,this._lineVbo),gl.vertexAttribPointer(0,3,gl.FLOAT,!1,0,0),gl.enableVertexAttribArray(0),gl.useProgram(this._program);var projectionMatrix=WebGLSpins._perspectiveProjectionMatrix(this._options.verticalFieldOfView,width/height,.1,1e4);gl.uniformMatrix4fv(gl.getUniformLocation(this._program,"uProjectionMatrix"),!1,WebGLSpins._toFloat32Array(projectionMatrix));var modelviewMatrix=WebGLSpins._lookAtMatrix(this._options.cameraLocation,this._options.centerLocation,this._options.upVector);gl.uniformMatrix4fv(gl.getUniformLocation(this._program,"uModelviewMatrix"),!1,WebGLSpins._toFloat32Array(modelviewMatrix)),gl.uniform3f(gl.getUniformLocation(this._program,"uBoundingBoxMin"),xmin,ymin,zmin),gl.uniform3f(gl.getUniformLocation(this._program,"uBoundingBoxMax"),xmax,ymax,zmax),gl.uniform3f(gl.getUniformLocation(this._program,"uBoundingBoxColor"),red,green,blue),gl.disable(gl.CULL_FACE),gl.drawArrays(gl.LINES,0,24),gl.enable(gl.CULL_FACE)}},WebGLSpins._BoundingBoxRenderer.prototype.initGLContext=function(){if(!this._gl_initialized){this._gl_initialized=!0;var gl=this._webglspins._gl;this._lineVbo=gl.createBuffer(),gl.bindBuffer(gl.ARRAY_BUFFER,this._lineVbo),gl.bufferData(gl.ARRAY_BUFFER,new Float32Array([0,0,0,1,0,0,1,0,0,1,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,1,0,1,1,0,1,1,1,1,1,1,1,0,1,1,0,1,1,0,0,1,0,0,0,0,0,1,1,0,0,1,0,1,1,1,0,1,1,1,0,1,0,0,1,1]),gl.STATIC_DRAW),gl.vertexAttribPointer(0,3,gl.FLOAT,!1,0,0),gl.enableVertexAttribArray(0),this._updateShaderProgram()}},WebGLSpins._BoundingBoxRenderer.prototype._updateShaderProgram=function(){var gl=this._webglspins._gl;this._program&&gl.deleteProgram(this._program);var program=WebGLSpins._createProgram(gl,"\n        #version 100\n        precision highp float;\n\n        uniform mat4 uProjectionMatrix;\n        uniform mat4 uModelviewMatrix;\n        uniform vec3 uBoundingBoxMin;\n        uniform vec3 uBoundingBoxMax;\n        attribute vec3 ivPosition;\n\n        void main(void) {\n          gl_Position = uProjectionMatrix * uModelviewMatrix * vec4(ivPosition * (uBoundingBoxMax-uBoundingBoxMin)+uBoundingBoxMin, 1.0);\n        }\n        ","\n        #version 100\n        precision highp float;\n        uniform vec3 uBoundingBoxColor;\n\n        void main(void) {\n          gl_FragColor = vec4(uBoundingBoxColor, 1.0);\n        }",["ivPosition"]);null!=program&&(this._program=program)},WebGLSpins._BoundingBoxRenderer.prototype.cleanup=function(){var gl=this._webglspins._gl;gl.deleteBuffer(this._lineVbo),gl.deleteProgram(this._program),gl.disableVertexAttribArray(0)};